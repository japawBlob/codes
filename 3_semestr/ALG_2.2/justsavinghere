
int func (int* schedule, int experimentNO, int currentBest, int top, experiment_t** experiments){
	//int shift = 0;
	printf("%i\n", experiments[0]->income);
	//printf("%i\n", experiments[0]->activeDays[experiments[0]->requieredDays-1]);
	/*for (int i = 0; i < numberOfExperiments; ++i)
	{
		printf("%i \n", experiments[i]->income);
	}*/
	int blob = 0;
	int ret = 0;
	int j = 0;
	int increment = 0;
	int localBest = currentBest;

	int tempSched[numberOfDays];
	for (int i = 0; i < numberOfDays; ++i)
	{
		tempSched[i]=schedule[i];
	}

	do{
		for (j = j+increment; j < numberOfDays; ++j){
			//j=j+shift;
			//printf("%i\n", experiments[experimentNO]->activeDays[experiments[experimentNO]->requieredDays-1]+j);
			if((experiments[experimentNO]->activeDays[experiments[experimentNO]->requieredDays-1]+j)<numberOfDays){
				for (int k = 0; k < experiments[experimentNO]->requieredDays; k++){
					//printf("DOSTANU SE SEM?\n");
					if(schedule[(experiments[experimentNO]->activeDays[k])+j]!=0){
						break;	
					} else {
						blob++;
					}
				}
				if(blob==(experiments[experimentNO]->requieredDays)){
					for (int k = 0; k < experiments[experimentNO]->requieredDays; k++){
						schedule[(experiments[experimentNO]->activeDays[k])+j]=experimentNO+1;
					}
					for (int k = 0; k < numberOfDays; ++k)
					{
						printf("%i ", schedule[k]);
					}
					printf("\n");
					localBest+=experiments[experimentNO]->income;
					blob=0;
					if(localBest>top){
						return 0;
					}
					//experimentNO++;
					//j=0;
					//printf("JSEM TU???\n");
					if(experimentNO+1<numberOfExperiments){
						if((ret=func(schedule,experimentNO+1, currentBest, top, experiments))>currentBest){
							currentBest=ret;
						}
					}

				}
				blob=0;
			}
			if(localBest>currentBest){
				currentBest=localBest;
			}
			localBest=0;
			for (int k = 0; k < numberOfDays; ++k)
			{
				schedule[k]=tempSched[k];
			}
		}
		j=0;
		/*for (int k = 0; k < numberOfDays; ++k)
		{
			schedule[k]=0;
		}*/
		//experimentNO=0;
		increment++;
		//printf("increment: %i\n", increment);
	} while(increment<numberOfDays);
	return currentBest;
}
