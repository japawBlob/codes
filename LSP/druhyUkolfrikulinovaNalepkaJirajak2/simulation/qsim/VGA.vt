// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/05/2019 15:23:00"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    VGAgenerator
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module VGAgenerator_vlg_sample_tst(
	ACLRN,
	CLOCK_50,
	sampler_tx
);
input  ACLRN;
input  CLOCK_50;
output sampler_tx;

reg sample;
time current_time;
always @(ACLRN or CLOCK_50)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module VGAgenerator_vlg_check_tst (
	VGA_BLANK,
	VGA_CLK,
	VGA_HS,
	VGA_SYNC,
	VGA_VS,
	xcolumn,
	yrow,
	sampler_rx
);
input  VGA_BLANK;
input  VGA_CLK;
input  VGA_HS;
input  VGA_SYNC;
input  VGA_VS;
input [9:0] xcolumn;
input [9:0] yrow;
input sampler_rx;

reg  VGA_BLANK_expected;
reg  VGA_CLK_expected;
reg  VGA_HS_expected;
reg  VGA_SYNC_expected;
reg  VGA_VS_expected;
reg [9:0] xcolumn_expected;
reg [9:0] yrow_expected;

reg  VGA_BLANK_prev;
reg  VGA_CLK_prev;
reg  VGA_HS_prev;
reg  VGA_SYNC_prev;
reg  VGA_VS_prev;
reg [9:0] xcolumn_prev;
reg [9:0] yrow_prev;

reg  VGA_BLANK_expected_prev;
reg  VGA_CLK_expected_prev;
reg  VGA_HS_expected_prev;
reg  VGA_SYNC_expected_prev;
reg  VGA_VS_expected_prev;
reg [9:0] xcolumn_expected_prev;
reg [9:0] yrow_expected_prev;

reg  last_VGA_BLANK_exp;
reg  last_VGA_CLK_exp;
reg  last_VGA_HS_exp;
reg  last_VGA_SYNC_exp;
reg  last_VGA_VS_exp;
reg [9:0] last_xcolumn_exp;
reg [9:0] last_yrow_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	VGA_BLANK_prev = VGA_BLANK;
	VGA_CLK_prev = VGA_CLK;
	VGA_HS_prev = VGA_HS;
	VGA_SYNC_prev = VGA_SYNC;
	VGA_VS_prev = VGA_VS;
	xcolumn_prev = xcolumn;
	yrow_prev = yrow;
end

// update expected /o prevs

always @(trigger)
begin
	VGA_BLANK_expected_prev = VGA_BLANK_expected;
	VGA_CLK_expected_prev = VGA_CLK_expected;
	VGA_HS_expected_prev = VGA_HS_expected;
	VGA_SYNC_expected_prev = VGA_SYNC_expected;
	VGA_VS_expected_prev = VGA_VS_expected;
	xcolumn_expected_prev = xcolumn_expected;
	yrow_expected_prev = yrow_expected;
end



// expected VGA_BLANK
initial
begin
	VGA_BLANK_expected = 1'bX;
end 

// expected VGA_CLK
initial
begin
	VGA_CLK_expected = 1'bX;
end 

// expected VGA_HS
initial
begin
	VGA_HS_expected = 1'bX;
end 

// expected VGA_SYNC
initial
begin
	VGA_SYNC_expected = 1'bX;
end 

// expected VGA_VS
initial
begin
	VGA_VS_expected = 1'bX;
end 
// expected xcolumn[ 9 ]
initial
begin
	xcolumn_expected[9] = 1'bX;
end 
// expected xcolumn[ 8 ]
initial
begin
	xcolumn_expected[8] = 1'bX;
end 
// expected xcolumn[ 7 ]
initial
begin
	xcolumn_expected[7] = 1'bX;
end 
// expected xcolumn[ 6 ]
initial
begin
	xcolumn_expected[6] = 1'bX;
end 
// expected xcolumn[ 5 ]
initial
begin
	xcolumn_expected[5] = 1'bX;
end 
// expected xcolumn[ 4 ]
initial
begin
	xcolumn_expected[4] = 1'bX;
end 
// expected xcolumn[ 3 ]
initial
begin
	xcolumn_expected[3] = 1'bX;
end 
// expected xcolumn[ 2 ]
initial
begin
	xcolumn_expected[2] = 1'bX;
end 
// expected xcolumn[ 1 ]
initial
begin
	xcolumn_expected[1] = 1'bX;
end 
// expected xcolumn[ 0 ]
initial
begin
	xcolumn_expected[0] = 1'bX;
end 
// expected yrow[ 9 ]
initial
begin
	yrow_expected[9] = 1'bX;
end 
// expected yrow[ 8 ]
initial
begin
	yrow_expected[8] = 1'bX;
end 
// expected yrow[ 7 ]
initial
begin
	yrow_expected[7] = 1'bX;
end 
// expected yrow[ 6 ]
initial
begin
	yrow_expected[6] = 1'bX;
end 
// expected yrow[ 5 ]
initial
begin
	yrow_expected[5] = 1'bX;
end 
// expected yrow[ 4 ]
initial
begin
	yrow_expected[4] = 1'bX;
end 
// expected yrow[ 3 ]
initial
begin
	yrow_expected[3] = 1'bX;
end 
// expected yrow[ 2 ]
initial
begin
	yrow_expected[2] = 1'bX;
end 
// expected yrow[ 1 ]
initial
begin
	yrow_expected[1] = 1'bX;
end 
// expected yrow[ 0 ]
initial
begin
	yrow_expected[0] = 1'bX;
end 
// generate trigger
always @(VGA_BLANK_expected or VGA_BLANK or VGA_CLK_expected or VGA_CLK or VGA_HS_expected or VGA_HS or VGA_SYNC_expected or VGA_SYNC or VGA_VS_expected or VGA_VS or xcolumn_expected or xcolumn or yrow_expected or yrow)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected VGA_BLANK = %b | expected VGA_CLK = %b | expected VGA_HS = %b | expected VGA_SYNC = %b | expected VGA_VS = %b | expected xcolumn = %b | expected yrow = %b | ",VGA_BLANK_expected_prev,VGA_CLK_expected_prev,VGA_HS_expected_prev,VGA_SYNC_expected_prev,VGA_VS_expected_prev,xcolumn_expected_prev,yrow_expected_prev);
	$display("| real VGA_BLANK = %b | real VGA_CLK = %b | real VGA_HS = %b | real VGA_SYNC = %b | real VGA_VS = %b | real xcolumn = %b | real yrow = %b | ",VGA_BLANK_prev,VGA_CLK_prev,VGA_HS_prev,VGA_SYNC_prev,VGA_VS_prev,xcolumn_prev,yrow_prev);
`endif
	if (
		( VGA_BLANK_expected_prev !== 1'bx ) && ( VGA_BLANK_prev !== VGA_BLANK_expected_prev )
		&& ((VGA_BLANK_expected_prev !== last_VGA_BLANK_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_BLANK :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_BLANK_expected_prev);
		$display ("     Real value = %b", VGA_BLANK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_VGA_BLANK_exp = VGA_BLANK_expected_prev;
	end
	if (
		( VGA_CLK_expected_prev !== 1'bx ) && ( VGA_CLK_prev !== VGA_CLK_expected_prev )
		&& ((VGA_CLK_expected_prev !== last_VGA_CLK_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_CLK :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_CLK_expected_prev);
		$display ("     Real value = %b", VGA_CLK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_VGA_CLK_exp = VGA_CLK_expected_prev;
	end
	if (
		( VGA_HS_expected_prev !== 1'bx ) && ( VGA_HS_prev !== VGA_HS_expected_prev )
		&& ((VGA_HS_expected_prev !== last_VGA_HS_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_HS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_HS_expected_prev);
		$display ("     Real value = %b", VGA_HS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_VGA_HS_exp = VGA_HS_expected_prev;
	end
	if (
		( VGA_SYNC_expected_prev !== 1'bx ) && ( VGA_SYNC_prev !== VGA_SYNC_expected_prev )
		&& ((VGA_SYNC_expected_prev !== last_VGA_SYNC_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_SYNC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_SYNC_expected_prev);
		$display ("     Real value = %b", VGA_SYNC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_VGA_SYNC_exp = VGA_SYNC_expected_prev;
	end
	if (
		( VGA_VS_expected_prev !== 1'bx ) && ( VGA_VS_prev !== VGA_VS_expected_prev )
		&& ((VGA_VS_expected_prev !== last_VGA_VS_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port VGA_VS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", VGA_VS_expected_prev);
		$display ("     Real value = %b", VGA_VS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_VGA_VS_exp = VGA_VS_expected_prev;
	end
	if (
		( xcolumn_expected_prev[0] !== 1'bx ) && ( xcolumn_prev[0] !== xcolumn_expected_prev[0] )
		&& ((xcolumn_expected_prev[0] !== last_xcolumn_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xcolumn[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xcolumn_expected_prev);
		$display ("     Real value = %b", xcolumn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xcolumn_exp[0] = xcolumn_expected_prev[0];
	end
	if (
		( xcolumn_expected_prev[1] !== 1'bx ) && ( xcolumn_prev[1] !== xcolumn_expected_prev[1] )
		&& ((xcolumn_expected_prev[1] !== last_xcolumn_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xcolumn[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xcolumn_expected_prev);
		$display ("     Real value = %b", xcolumn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xcolumn_exp[1] = xcolumn_expected_prev[1];
	end
	if (
		( xcolumn_expected_prev[2] !== 1'bx ) && ( xcolumn_prev[2] !== xcolumn_expected_prev[2] )
		&& ((xcolumn_expected_prev[2] !== last_xcolumn_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xcolumn[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xcolumn_expected_prev);
		$display ("     Real value = %b", xcolumn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xcolumn_exp[2] = xcolumn_expected_prev[2];
	end
	if (
		( xcolumn_expected_prev[3] !== 1'bx ) && ( xcolumn_prev[3] !== xcolumn_expected_prev[3] )
		&& ((xcolumn_expected_prev[3] !== last_xcolumn_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xcolumn[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xcolumn_expected_prev);
		$display ("     Real value = %b", xcolumn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xcolumn_exp[3] = xcolumn_expected_prev[3];
	end
	if (
		( xcolumn_expected_prev[4] !== 1'bx ) && ( xcolumn_prev[4] !== xcolumn_expected_prev[4] )
		&& ((xcolumn_expected_prev[4] !== last_xcolumn_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xcolumn[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xcolumn_expected_prev);
		$display ("     Real value = %b", xcolumn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xcolumn_exp[4] = xcolumn_expected_prev[4];
	end
	if (
		( xcolumn_expected_prev[5] !== 1'bx ) && ( xcolumn_prev[5] !== xcolumn_expected_prev[5] )
		&& ((xcolumn_expected_prev[5] !== last_xcolumn_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xcolumn[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xcolumn_expected_prev);
		$display ("     Real value = %b", xcolumn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xcolumn_exp[5] = xcolumn_expected_prev[5];
	end
	if (
		( xcolumn_expected_prev[6] !== 1'bx ) && ( xcolumn_prev[6] !== xcolumn_expected_prev[6] )
		&& ((xcolumn_expected_prev[6] !== last_xcolumn_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xcolumn[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xcolumn_expected_prev);
		$display ("     Real value = %b", xcolumn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xcolumn_exp[6] = xcolumn_expected_prev[6];
	end
	if (
		( xcolumn_expected_prev[7] !== 1'bx ) && ( xcolumn_prev[7] !== xcolumn_expected_prev[7] )
		&& ((xcolumn_expected_prev[7] !== last_xcolumn_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xcolumn[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xcolumn_expected_prev);
		$display ("     Real value = %b", xcolumn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xcolumn_exp[7] = xcolumn_expected_prev[7];
	end
	if (
		( xcolumn_expected_prev[8] !== 1'bx ) && ( xcolumn_prev[8] !== xcolumn_expected_prev[8] )
		&& ((xcolumn_expected_prev[8] !== last_xcolumn_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xcolumn[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xcolumn_expected_prev);
		$display ("     Real value = %b", xcolumn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xcolumn_exp[8] = xcolumn_expected_prev[8];
	end
	if (
		( xcolumn_expected_prev[9] !== 1'bx ) && ( xcolumn_prev[9] !== xcolumn_expected_prev[9] )
		&& ((xcolumn_expected_prev[9] !== last_xcolumn_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xcolumn[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xcolumn_expected_prev);
		$display ("     Real value = %b", xcolumn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_xcolumn_exp[9] = xcolumn_expected_prev[9];
	end
	if (
		( yrow_expected_prev[0] !== 1'bx ) && ( yrow_prev[0] !== yrow_expected_prev[0] )
		&& ((yrow_expected_prev[0] !== last_yrow_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port yrow[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", yrow_expected_prev);
		$display ("     Real value = %b", yrow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_yrow_exp[0] = yrow_expected_prev[0];
	end
	if (
		( yrow_expected_prev[1] !== 1'bx ) && ( yrow_prev[1] !== yrow_expected_prev[1] )
		&& ((yrow_expected_prev[1] !== last_yrow_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port yrow[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", yrow_expected_prev);
		$display ("     Real value = %b", yrow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_yrow_exp[1] = yrow_expected_prev[1];
	end
	if (
		( yrow_expected_prev[2] !== 1'bx ) && ( yrow_prev[2] !== yrow_expected_prev[2] )
		&& ((yrow_expected_prev[2] !== last_yrow_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port yrow[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", yrow_expected_prev);
		$display ("     Real value = %b", yrow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_yrow_exp[2] = yrow_expected_prev[2];
	end
	if (
		( yrow_expected_prev[3] !== 1'bx ) && ( yrow_prev[3] !== yrow_expected_prev[3] )
		&& ((yrow_expected_prev[3] !== last_yrow_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port yrow[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", yrow_expected_prev);
		$display ("     Real value = %b", yrow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_yrow_exp[3] = yrow_expected_prev[3];
	end
	if (
		( yrow_expected_prev[4] !== 1'bx ) && ( yrow_prev[4] !== yrow_expected_prev[4] )
		&& ((yrow_expected_prev[4] !== last_yrow_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port yrow[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", yrow_expected_prev);
		$display ("     Real value = %b", yrow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_yrow_exp[4] = yrow_expected_prev[4];
	end
	if (
		( yrow_expected_prev[5] !== 1'bx ) && ( yrow_prev[5] !== yrow_expected_prev[5] )
		&& ((yrow_expected_prev[5] !== last_yrow_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port yrow[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", yrow_expected_prev);
		$display ("     Real value = %b", yrow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_yrow_exp[5] = yrow_expected_prev[5];
	end
	if (
		( yrow_expected_prev[6] !== 1'bx ) && ( yrow_prev[6] !== yrow_expected_prev[6] )
		&& ((yrow_expected_prev[6] !== last_yrow_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port yrow[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", yrow_expected_prev);
		$display ("     Real value = %b", yrow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_yrow_exp[6] = yrow_expected_prev[6];
	end
	if (
		( yrow_expected_prev[7] !== 1'bx ) && ( yrow_prev[7] !== yrow_expected_prev[7] )
		&& ((yrow_expected_prev[7] !== last_yrow_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port yrow[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", yrow_expected_prev);
		$display ("     Real value = %b", yrow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_yrow_exp[7] = yrow_expected_prev[7];
	end
	if (
		( yrow_expected_prev[8] !== 1'bx ) && ( yrow_prev[8] !== yrow_expected_prev[8] )
		&& ((yrow_expected_prev[8] !== last_yrow_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port yrow[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", yrow_expected_prev);
		$display ("     Real value = %b", yrow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_yrow_exp[8] = yrow_expected_prev[8];
	end
	if (
		( yrow_expected_prev[9] !== 1'bx ) && ( yrow_prev[9] !== yrow_expected_prev[9] )
		&& ((yrow_expected_prev[9] !== last_yrow_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port yrow[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", yrow_expected_prev);
		$display ("     Real value = %b", yrow_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_yrow_exp[9] = yrow_expected_prev[9];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module VGAgenerator_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ACLRN;
reg CLOCK_50;
// wires                                               
wire VGA_BLANK;
wire VGA_CLK;
wire VGA_HS;
wire VGA_SYNC;
wire VGA_VS;
wire [9:0] xcolumn;
wire [9:0] yrow;

wire sampler;                             

// assign statements (if any)                          
VGAgenerator i1 (
// port map - connection between master ports and signals/registers   
	.ACLRN(ACLRN),
	.CLOCK_50(CLOCK_50),
	.VGA_BLANK(VGA_BLANK),
	.VGA_CLK(VGA_CLK),
	.VGA_HS(VGA_HS),
	.VGA_SYNC(VGA_SYNC),
	.VGA_VS(VGA_VS),
	.xcolumn(xcolumn),
	.yrow(yrow)
);

// ACLRN
initial
begin
	ACLRN = 1'b0;
	ACLRN = #10000 1'b1;
end 

// CLOCK_50
always
begin
	CLOCK_50 = 1'b0;
	CLOCK_50 = #10000 1'b1;
	#10000;
end 

VGAgenerator_vlg_sample_tst tb_sample (
	.ACLRN(ACLRN),
	.CLOCK_50(CLOCK_50),
	.sampler_tx(sampler)
);

VGAgenerator_vlg_check_tst tb_out(
	.VGA_BLANK(VGA_BLANK),
	.VGA_CLK(VGA_CLK),
	.VGA_HS(VGA_HS),
	.VGA_SYNC(VGA_SYNC),
	.VGA_VS(VGA_VS),
	.xcolumn(xcolumn),
	.yrow(yrow),
	.sampler_rx(sampler)
);
endmodule

